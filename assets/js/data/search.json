[
  
  {
    "title": "LINUX. What is it? Why care?",
    "url": "/posts/Linux/",
    "categories": "Software, Linux",
    "tags": "",
    "date": "2022-02-17 00:00:00 +0800",
    





    "snippet": "“Linux is a cancer”Steve Ballmer, Microsoft CEO, 2001Linux is a family of open-source operating systems, based on the Linux kernel, and a fundamental technology of the 21st Century.  One form or another of it has helped you to engage with the rest of the world, whether you know it or not.Were we to inspect one of the servers powering Google’s search technology, the codebase of a supercomputer besting a human opponent in a strategy game, or the OS of your mobile device we would, almost certainly, find evidence of Linux.Android is derived from it, as are key components of MacOS.  It is the most widely propagated operating system in cloud computing and server ecosystems.  As of 2021, every single supercomputer was powered by a Linux system.We could even discover it Mars.On the 19th of April 2021 a Linux OS booted up a small processor board, similar to chips found on Earth in Android and Sony mobile devices ten years prior.  It went on to schedule and execute the processes that caused Ingenuity, a 1.8kg helicopter drone, to successfully complete the first automated, controlled flight on another planet, in the thin Martian atmosphere.Whereas Microsoft Windows is the OS of choice for private users, Linux is the software bedrock supporting the World Wide Web.  Even Microsoft have changed their tune and now Linux use has surpassed Windows on Microsoft’s own cloud computing service."
  },
  
  {
    "title": "BASH and the Command-line Interface",
    "url": "/posts/BASH/",
    "categories": "Software, Linux",
    "tags": "",
    "date": "2022-02-03 00:00:00 +0800",
    





    "snippet": "The BASH shell provides a powerful machine-user interface for Linux systems.  It is both a program that interprets user input, and a programming language.  This makes sense, as to interpret user commands the shell requires a shared language, or command syntax, that both the operating system and human can understand.  We construct text commands to feed to the interpreter at the command line interface (CLI).Although it might appear to be an unintuitive, and frankly arcane, way to communicate with a computing system, the CLI is a highly useful tool.  Ultimately, BASH and the CLI allow for greater system insight and control, enable automation, and can aid you in decimating tediously routine tasks.Open the shell window, or terminal, with  Ctrl Alt T   and type:$ lshwThis compact command returns your machine’s processing and data storage capabilities, specifically its central processing unit’s (CPU) architecture.Perhaps we just want to know our CPU version for gaming considerations.  We will use the super-user sudo command here to invoke full system privileges. $ sudo lshw  | grep CPUThe output to my terminal reads:description: CPUproduct: Intel(R) Core(TM) i5-3320M CPU @ 2.60GHzversion: Intel(R) Core(TM) i5-3320M CPU @ 2.60GHzslot: CPU Socket - U3E1   The exact specifications we required, and just by stacking another command alongside the first, joined by the character, |.  This symbol is more than a mere conjunction, though.  The second command took the output from the first and computed it.We identified to the system what data we wanted to examine, the output from the command lshw, and using grep, searched and returned the exact ‘string’, or configuration of letters we were looking for.  This is an example of piping in Linux, and you now have an inkling of the power at your fingertips when you familiarise yourself with shell syntax, and the command-line interface.Utilising BASH and the CLI enables us to fully harness our machine’s resources.  The capability to orchestrate tailored processes in repeatable ways, that of automation, is most effectively done on Linux systems through shell-scripts.The shell can interpret commands saved into plain text files called shell scripts.  Many core system files are, in fact, shell-scripts.  With these we can craft more complex commands, saving them to be run at a later date to replicate a process."
  },
  
  {
    "title": "The Ten BASH Commandments",
    "url": "/posts/The-Ten-BASH-Commandments/",
    "categories": "Software, Linux",
    "tags": "",
    "date": "2022-02-01 00:00:00 +0800",
    





    "snippet": "We start here $, at the shell prompt. Press Ctrl Alt TMost Linux systems display your username followed by your system, or ‘host’, name and the current working directory. For me: james@scriptorium-ThinkPad-T430:~, where the Linux ‘metacharacter’, the tilde ~, represents my home directory. To find your system name input:hostname. The prompt is configurable.$ pwdoutputs the working directory.$ cdchanges directories. This command takes one ‘argument’, (additional information for the shell to process alongside the command, such as filename, directory, device etc). In this case it is the target directory, e.g. cd Documents, takes you to the Document directory, or folder.Inputting cd without an argument takes you back to your home directory, while cd .. moves you one directory up in the filesystem.Arguments will be shown in square brackets $ command [argument].$ lslists the content of the current, or specified e.g. ls Documents, directory.Most commands can have one or more options, buttons which configure the command, tailoring its output. For ls such options include:$ ls -R$ ls -a$ ls -al    R  standing for recursively, so the command will list all directories and sub-directories.a  lists hidden files as well.al will list important file and directory information, such as permissions, size, owner.Commands can take multiple options. The full syntax is:$ command [options] [argument 1] [argument 2]$ cat [filename]      short for concatenate, lists the contents of a file (in the standard output).$ man [command]brings up the user manual of any Linux command.$ touch [filename1] [filename2] [filename3]modifies timestamps for a given file, or creates a new, empty file if it does not yet exist. Takes multiple arguments, e.g. to create a batch of new files.$ sudo [command]    precedes other commands, executing them with ‘super user’ permissions.$ dateoutputs the date to standard output.$ mvrenames or moves a file.If the second argument is a directory this is the destination for the specified file.mv [source file] [destination directory],or if used with a file as the second argument,mv [source file] [target file], and [target file] doesn’t exist, it copies the first file and relabels it.$ grep [string/pattern] [filename]Searches for a defined pattern/strong from standard input, and prints the lines with the matching pattern."
  },
  
  {
    "title": "An Anatomy of a Shell Script",
    "url": "/posts/An-Anatomy-of-a-Shell-Script/",
    "categories": "Software, Linux",
    "tags": "",
    "date": "2022-02-01 00:00:00 +0800",
    





    "snippet": "A program is many things. It is a piece of text typed by a programmer, it is the directing force that makes the computer do what it does, it is data in the computer’s memory, yet it controls the actions performed on this same memory.Marijn Haverbeke"
  }
  
]

